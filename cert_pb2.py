# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cert.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='cert.proto',
  package='gnoi.certificate',
  syntax='proto3',
  serialized_pb=_b('\n\ncert.proto\x12\x10gnoi.certificate\"\xf0\x01\n\x18RotateCertificateRequest\x12<\n\x0cgenerate_csr\x18\x01 \x01(\x0b\x32$.gnoi.certificate.GenerateCSRRequestH\x00\x12\x44\n\x10load_certificate\x18\x02 \x01(\x0b\x32(.gnoi.certificate.LoadCertificateRequestH\x00\x12>\n\x11\x66inalize_rotation\x18\x03 \x01(\x0b\x32!.gnoi.certificate.FinalizeRequestH\x00\x42\x10\n\x0erotate_request\"\xb5\x01\n\x19RotateCertificateResponse\x12>\n\rgenerated_csr\x18\x01 \x01(\x0b\x32%.gnoi.certificate.GenerateCSRResponseH\x00\x12\x45\n\x10load_certificate\x18\x02 \x01(\x0b\x32).gnoi.certificate.LoadCertificateResponseH\x00\x42\x11\n\x0frotate_response\"\xb2\x01\n\x19InstallCertificateRequest\x12<\n\x0cgenerate_csr\x18\x01 \x01(\x0b\x32$.gnoi.certificate.GenerateCSRRequestH\x00\x12\x44\n\x10load_certificate\x18\x02 \x01(\x0b\x32(.gnoi.certificate.LoadCertificateRequestH\x00\x42\x11\n\x0finstall_request\"\xb7\x01\n\x1aInstallCertificateResponse\x12>\n\rgenerated_csr\x18\x01 \x01(\x0b\x32%.gnoi.certificate.GenerateCSRResponseH\x00\x12\x45\n\x10load_certificate\x18\x02 \x01(\x0b\x32).gnoi.certificate.LoadCertificateResponseH\x00\x42\x12\n\x10install_response\"]\n\x12GenerateCSRRequest\x12/\n\ncsr_params\x18\x01 \x01(\x0b\x32\x1b.gnoi.certificate.CSRParams\x12\x16\n\x0e\x63\x65rtificate_id\x18\x02 \x01(\t\"\x9b\x02\n\tCSRParams\x12/\n\x04type\x18\x01 \x01(\x0e\x32!.gnoi.certificate.CertificateType\x12\x14\n\x0cmin_key_size\x18\x02 \x01(\r\x12+\n\x08key_type\x18\x03 \x01(\x0e\x32\x19.gnoi.certificate.KeyType\x12\x13\n\x0b\x63ommon_name\x18\x04 \x01(\t\x12\x0f\n\x07\x63ountry\x18\x05 \x01(\t\x12\r\n\x05state\x18\x06 \x01(\t\x12\x0c\n\x04\x63ity\x18\x07 \x01(\t\x12\x14\n\x0corganization\x18\x08 \x01(\t\x12\x1b\n\x13organizational_unit\x18\t \x01(\t\x12\x12\n\nip_address\x18\n \x01(\t\x12\x10\n\x08\x65mail_id\x18\x0b \x01(\t\"9\n\x13GenerateCSRResponse\x12\"\n\x03\x63sr\x18\x01 \x01(\x0b\x32\x15.gnoi.certificate.CSR\"\xc9\x01\n\x16LoadCertificateRequest\x12\x32\n\x0b\x63\x65rtificate\x18\x01 \x01(\x0b\x32\x1d.gnoi.certificate.Certificate\x12+\n\x08key_pair\x18\x02 \x01(\x0b\x32\x19.gnoi.certificate.KeyPair\x12\x16\n\x0e\x63\x65rtificate_id\x18\x03 \x01(\t\x12\x36\n\x0f\x63\x61_certificates\x18\x04 \x03(\x0b\x32\x1d.gnoi.certificate.Certificate\"\x19\n\x17LoadCertificateResponse\"\x11\n\x0f\x46inalizeRequest\"\x18\n\x16GetCertificatesRequest\"V\n\x17GetCertificatesResponse\x12;\n\x10\x63\x65rtificate_info\x18\x01 \x03(\x0b\x32!.gnoi.certificate.CertificateInfo\"\xa7\x01\n\x0f\x43\x65rtificateInfo\x12\x16\n\x0e\x63\x65rtificate_id\x18\x01 \x01(\t\x12\x32\n\x0b\x63\x65rtificate\x18\x02 \x01(\x0b\x32\x1d.gnoi.certificate.Certificate\x12-\n\tendpoints\x18\x03 \x03(\x0b\x32\x1a.gnoi.certificate.Endpoint\x12\x19\n\x11modification_time\x18\x04 \x01(\x03\"3\n\x19RevokeCertificatesRequest\x12\x16\n\x0e\x63\x65rtificate_id\x18\x01 \x03(\t\"\x90\x01\n\x1aRevokeCertificatesResponse\x12\x1e\n\x16revoked_certificate_id\x18\x01 \x03(\t\x12R\n\x1c\x63\x65rtificate_revocation_error\x18\x02 \x03(\x0b\x32,.gnoi.certificate.CertificateRevocationError\"K\n\x1a\x43\x65rtificateRevocationError\x12\x16\n\x0e\x63\x65rtificate_id\x18\x01 \x01(\t\x12\x15\n\rerror_message\x18\x02 \x01(\t\"\x93\x01\n\x15\x43\x61nGenerateCSRRequest\x12+\n\x08key_type\x18\x01 \x01(\x0e\x32\x19.gnoi.certificate.KeyType\x12;\n\x10\x63\x65rtificate_type\x18\x02 \x01(\x0e\x32!.gnoi.certificate.CertificateType\x12\x10\n\x08key_size\x18\x03 \x01(\r\".\n\x16\x43\x61nGenerateCSRResponse\x12\x14\n\x0c\x63\x61n_generate\x18\x04 \x01(\x08\"S\n\x0b\x43\x65rtificate\x12/\n\x04type\x18\x01 \x01(\x0e\x32!.gnoi.certificate.CertificateType\x12\x13\n\x0b\x63\x65rtificate\x18\x02 \x01(\x0c\"C\n\x03\x43SR\x12/\n\x04type\x18\x01 \x01(\x0e\x32!.gnoi.certificate.CertificateType\x12\x0b\n\x03\x63sr\x18\x02 \x01(\x0c\"2\n\x07KeyPair\x12\x13\n\x0bprivate_key\x18\x01 \x01(\x0c\x12\x12\n\npublic_key\x18\x02 \x01(\x0c\"\x8b\x01\n\x08\x45ndpoint\x12-\n\x04type\x18\x01 \x01(\x0e\x32\x1f.gnoi.certificate.Endpoint.Type\x12\x10\n\x08\x65ndpoint\x18\x02 \x01(\t\">\n\x04Type\x12\x12\n\x0e\x45P_UNSPECIFIED\x10\x00\x12\x13\n\x0f\x45P_IPSEC_TUNNEL\x10\x01\x12\r\n\tEP_DAEMON\x10\x02*.\n\x0f\x43\x65rtificateType\x12\x0e\n\nCT_UNKNOWN\x10\x00\x12\x0b\n\x07\x43T_X509\x10\x01*%\n\x07KeyType\x12\x0e\n\nKT_UNKNOWN\x10\x00\x12\n\n\x06KT_RSA\x10\x01\x32\xa6\x04\n\x15\x43\x65rtificateManagement\x12\x65\n\x06Rotate\x12*.gnoi.certificate.RotateCertificateRequest\x1a+.gnoi.certificate.RotateCertificateResponse(\x01\x30\x01\x12h\n\x07Install\x12+.gnoi.certificate.InstallCertificateRequest\x1a,.gnoi.certificate.InstallCertificateResponse(\x01\x30\x01\x12\x66\n\x0fGetCertificates\x12(.gnoi.certificate.GetCertificatesRequest\x1a).gnoi.certificate.GetCertificatesResponse\x12o\n\x12RevokeCertificates\x12+.gnoi.certificate.RevokeCertificatesRequest\x1a,.gnoi.certificate.RevokeCertificatesResponse\x12\x63\n\x0e\x43\x61nGenerateCSR\x12\'.gnoi.certificate.CanGenerateCSRRequest\x1a(.gnoi.certificate.CanGenerateCSRResponseb\x06proto3')
)

_CERTIFICATETYPE = _descriptor.EnumDescriptor(
  name='CertificateType',
  full_name='gnoi.certificate.CertificateType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='CT_UNKNOWN', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CT_X509', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=2623,
  serialized_end=2669,
)
_sym_db.RegisterEnumDescriptor(_CERTIFICATETYPE)

CertificateType = enum_type_wrapper.EnumTypeWrapper(_CERTIFICATETYPE)
_KEYTYPE = _descriptor.EnumDescriptor(
  name='KeyType',
  full_name='gnoi.certificate.KeyType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='KT_UNKNOWN', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='KT_RSA', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=2671,
  serialized_end=2708,
)
_sym_db.RegisterEnumDescriptor(_KEYTYPE)

KeyType = enum_type_wrapper.EnumTypeWrapper(_KEYTYPE)
CT_UNKNOWN = 0
CT_X509 = 1
KT_UNKNOWN = 0
KT_RSA = 1


_ENDPOINT_TYPE = _descriptor.EnumDescriptor(
  name='Type',
  full_name='gnoi.certificate.Endpoint.Type',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='EP_UNSPECIFIED', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='EP_IPSEC_TUNNEL', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='EP_DAEMON', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=2559,
  serialized_end=2621,
)
_sym_db.RegisterEnumDescriptor(_ENDPOINT_TYPE)


_ROTATECERTIFICATEREQUEST = _descriptor.Descriptor(
  name='RotateCertificateRequest',
  full_name='gnoi.certificate.RotateCertificateRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='generate_csr', full_name='gnoi.certificate.RotateCertificateRequest.generate_csr', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='load_certificate', full_name='gnoi.certificate.RotateCertificateRequest.load_certificate', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='finalize_rotation', full_name='gnoi.certificate.RotateCertificateRequest.finalize_rotation', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='rotate_request', full_name='gnoi.certificate.RotateCertificateRequest.rotate_request',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=33,
  serialized_end=273,
)


_ROTATECERTIFICATERESPONSE = _descriptor.Descriptor(
  name='RotateCertificateResponse',
  full_name='gnoi.certificate.RotateCertificateResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='generated_csr', full_name='gnoi.certificate.RotateCertificateResponse.generated_csr', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='load_certificate', full_name='gnoi.certificate.RotateCertificateResponse.load_certificate', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='rotate_response', full_name='gnoi.certificate.RotateCertificateResponse.rotate_response',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=276,
  serialized_end=457,
)


_INSTALLCERTIFICATEREQUEST = _descriptor.Descriptor(
  name='InstallCertificateRequest',
  full_name='gnoi.certificate.InstallCertificateRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='generate_csr', full_name='gnoi.certificate.InstallCertificateRequest.generate_csr', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='load_certificate', full_name='gnoi.certificate.InstallCertificateRequest.load_certificate', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='install_request', full_name='gnoi.certificate.InstallCertificateRequest.install_request',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=460,
  serialized_end=638,
)


_INSTALLCERTIFICATERESPONSE = _descriptor.Descriptor(
  name='InstallCertificateResponse',
  full_name='gnoi.certificate.InstallCertificateResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='generated_csr', full_name='gnoi.certificate.InstallCertificateResponse.generated_csr', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='load_certificate', full_name='gnoi.certificate.InstallCertificateResponse.load_certificate', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='install_response', full_name='gnoi.certificate.InstallCertificateResponse.install_response',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=641,
  serialized_end=824,
)


_GENERATECSRREQUEST = _descriptor.Descriptor(
  name='GenerateCSRRequest',
  full_name='gnoi.certificate.GenerateCSRRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='csr_params', full_name='gnoi.certificate.GenerateCSRRequest.csr_params', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='certificate_id', full_name='gnoi.certificate.GenerateCSRRequest.certificate_id', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=826,
  serialized_end=919,
)


_CSRPARAMS = _descriptor.Descriptor(
  name='CSRParams',
  full_name='gnoi.certificate.CSRParams',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='type', full_name='gnoi.certificate.CSRParams.type', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='min_key_size', full_name='gnoi.certificate.CSRParams.min_key_size', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='key_type', full_name='gnoi.certificate.CSRParams.key_type', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='common_name', full_name='gnoi.certificate.CSRParams.common_name', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='country', full_name='gnoi.certificate.CSRParams.country', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='state', full_name='gnoi.certificate.CSRParams.state', index=5,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='city', full_name='gnoi.certificate.CSRParams.city', index=6,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='organization', full_name='gnoi.certificate.CSRParams.organization', index=7,
      number=8, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='organizational_unit', full_name='gnoi.certificate.CSRParams.organizational_unit', index=8,
      number=9, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ip_address', full_name='gnoi.certificate.CSRParams.ip_address', index=9,
      number=10, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='email_id', full_name='gnoi.certificate.CSRParams.email_id', index=10,
      number=11, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=922,
  serialized_end=1205,
)


_GENERATECSRRESPONSE = _descriptor.Descriptor(
  name='GenerateCSRResponse',
  full_name='gnoi.certificate.GenerateCSRResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='csr', full_name='gnoi.certificate.GenerateCSRResponse.csr', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1207,
  serialized_end=1264,
)


_LOADCERTIFICATEREQUEST = _descriptor.Descriptor(
  name='LoadCertificateRequest',
  full_name='gnoi.certificate.LoadCertificateRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='certificate', full_name='gnoi.certificate.LoadCertificateRequest.certificate', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='key_pair', full_name='gnoi.certificate.LoadCertificateRequest.key_pair', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='certificate_id', full_name='gnoi.certificate.LoadCertificateRequest.certificate_id', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ca_certificates', full_name='gnoi.certificate.LoadCertificateRequest.ca_certificates', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1267,
  serialized_end=1468,
)


_LOADCERTIFICATERESPONSE = _descriptor.Descriptor(
  name='LoadCertificateResponse',
  full_name='gnoi.certificate.LoadCertificateResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1470,
  serialized_end=1495,
)


_FINALIZEREQUEST = _descriptor.Descriptor(
  name='FinalizeRequest',
  full_name='gnoi.certificate.FinalizeRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1497,
  serialized_end=1514,
)


_GETCERTIFICATESREQUEST = _descriptor.Descriptor(
  name='GetCertificatesRequest',
  full_name='gnoi.certificate.GetCertificatesRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1516,
  serialized_end=1540,
)


_GETCERTIFICATESRESPONSE = _descriptor.Descriptor(
  name='GetCertificatesResponse',
  full_name='gnoi.certificate.GetCertificatesResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='certificate_info', full_name='gnoi.certificate.GetCertificatesResponse.certificate_info', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1542,
  serialized_end=1628,
)


_CERTIFICATEINFO = _descriptor.Descriptor(
  name='CertificateInfo',
  full_name='gnoi.certificate.CertificateInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='certificate_id', full_name='gnoi.certificate.CertificateInfo.certificate_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='certificate', full_name='gnoi.certificate.CertificateInfo.certificate', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='endpoints', full_name='gnoi.certificate.CertificateInfo.endpoints', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='modification_time', full_name='gnoi.certificate.CertificateInfo.modification_time', index=3,
      number=4, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1631,
  serialized_end=1798,
)


_REVOKECERTIFICATESREQUEST = _descriptor.Descriptor(
  name='RevokeCertificatesRequest',
  full_name='gnoi.certificate.RevokeCertificatesRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='certificate_id', full_name='gnoi.certificate.RevokeCertificatesRequest.certificate_id', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1800,
  serialized_end=1851,
)


_REVOKECERTIFICATESRESPONSE = _descriptor.Descriptor(
  name='RevokeCertificatesResponse',
  full_name='gnoi.certificate.RevokeCertificatesResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='revoked_certificate_id', full_name='gnoi.certificate.RevokeCertificatesResponse.revoked_certificate_id', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='certificate_revocation_error', full_name='gnoi.certificate.RevokeCertificatesResponse.certificate_revocation_error', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1854,
  serialized_end=1998,
)


_CERTIFICATEREVOCATIONERROR = _descriptor.Descriptor(
  name='CertificateRevocationError',
  full_name='gnoi.certificate.CertificateRevocationError',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='certificate_id', full_name='gnoi.certificate.CertificateRevocationError.certificate_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='error_message', full_name='gnoi.certificate.CertificateRevocationError.error_message', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2000,
  serialized_end=2075,
)


_CANGENERATECSRREQUEST = _descriptor.Descriptor(
  name='CanGenerateCSRRequest',
  full_name='gnoi.certificate.CanGenerateCSRRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key_type', full_name='gnoi.certificate.CanGenerateCSRRequest.key_type', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='certificate_type', full_name='gnoi.certificate.CanGenerateCSRRequest.certificate_type', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='key_size', full_name='gnoi.certificate.CanGenerateCSRRequest.key_size', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2078,
  serialized_end=2225,
)


_CANGENERATECSRRESPONSE = _descriptor.Descriptor(
  name='CanGenerateCSRResponse',
  full_name='gnoi.certificate.CanGenerateCSRResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='can_generate', full_name='gnoi.certificate.CanGenerateCSRResponse.can_generate', index=0,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2227,
  serialized_end=2273,
)


_CERTIFICATE = _descriptor.Descriptor(
  name='Certificate',
  full_name='gnoi.certificate.Certificate',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='type', full_name='gnoi.certificate.Certificate.type', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='certificate', full_name='gnoi.certificate.Certificate.certificate', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2275,
  serialized_end=2358,
)


_CSR = _descriptor.Descriptor(
  name='CSR',
  full_name='gnoi.certificate.CSR',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='type', full_name='gnoi.certificate.CSR.type', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='csr', full_name='gnoi.certificate.CSR.csr', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2360,
  serialized_end=2427,
)


_KEYPAIR = _descriptor.Descriptor(
  name='KeyPair',
  full_name='gnoi.certificate.KeyPair',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='private_key', full_name='gnoi.certificate.KeyPair.private_key', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='public_key', full_name='gnoi.certificate.KeyPair.public_key', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2429,
  serialized_end=2479,
)


_ENDPOINT = _descriptor.Descriptor(
  name='Endpoint',
  full_name='gnoi.certificate.Endpoint',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='type', full_name='gnoi.certificate.Endpoint.type', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='endpoint', full_name='gnoi.certificate.Endpoint.endpoint', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _ENDPOINT_TYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2482,
  serialized_end=2621,
)

_ROTATECERTIFICATEREQUEST.fields_by_name['generate_csr'].message_type = _GENERATECSRREQUEST
_ROTATECERTIFICATEREQUEST.fields_by_name['load_certificate'].message_type = _LOADCERTIFICATEREQUEST
_ROTATECERTIFICATEREQUEST.fields_by_name['finalize_rotation'].message_type = _FINALIZEREQUEST
_ROTATECERTIFICATEREQUEST.oneofs_by_name['rotate_request'].fields.append(
  _ROTATECERTIFICATEREQUEST.fields_by_name['generate_csr'])
_ROTATECERTIFICATEREQUEST.fields_by_name['generate_csr'].containing_oneof = _ROTATECERTIFICATEREQUEST.oneofs_by_name['rotate_request']
_ROTATECERTIFICATEREQUEST.oneofs_by_name['rotate_request'].fields.append(
  _ROTATECERTIFICATEREQUEST.fields_by_name['load_certificate'])
_ROTATECERTIFICATEREQUEST.fields_by_name['load_certificate'].containing_oneof = _ROTATECERTIFICATEREQUEST.oneofs_by_name['rotate_request']
_ROTATECERTIFICATEREQUEST.oneofs_by_name['rotate_request'].fields.append(
  _ROTATECERTIFICATEREQUEST.fields_by_name['finalize_rotation'])
_ROTATECERTIFICATEREQUEST.fields_by_name['finalize_rotation'].containing_oneof = _ROTATECERTIFICATEREQUEST.oneofs_by_name['rotate_request']
_ROTATECERTIFICATERESPONSE.fields_by_name['generated_csr'].message_type = _GENERATECSRRESPONSE
_ROTATECERTIFICATERESPONSE.fields_by_name['load_certificate'].message_type = _LOADCERTIFICATERESPONSE
_ROTATECERTIFICATERESPONSE.oneofs_by_name['rotate_response'].fields.append(
  _ROTATECERTIFICATERESPONSE.fields_by_name['generated_csr'])
_ROTATECERTIFICATERESPONSE.fields_by_name['generated_csr'].containing_oneof = _ROTATECERTIFICATERESPONSE.oneofs_by_name['rotate_response']
_ROTATECERTIFICATERESPONSE.oneofs_by_name['rotate_response'].fields.append(
  _ROTATECERTIFICATERESPONSE.fields_by_name['load_certificate'])
_ROTATECERTIFICATERESPONSE.fields_by_name['load_certificate'].containing_oneof = _ROTATECERTIFICATERESPONSE.oneofs_by_name['rotate_response']
_INSTALLCERTIFICATEREQUEST.fields_by_name['generate_csr'].message_type = _GENERATECSRREQUEST
_INSTALLCERTIFICATEREQUEST.fields_by_name['load_certificate'].message_type = _LOADCERTIFICATEREQUEST
_INSTALLCERTIFICATEREQUEST.oneofs_by_name['install_request'].fields.append(
  _INSTALLCERTIFICATEREQUEST.fields_by_name['generate_csr'])
_INSTALLCERTIFICATEREQUEST.fields_by_name['generate_csr'].containing_oneof = _INSTALLCERTIFICATEREQUEST.oneofs_by_name['install_request']
_INSTALLCERTIFICATEREQUEST.oneofs_by_name['install_request'].fields.append(
  _INSTALLCERTIFICATEREQUEST.fields_by_name['load_certificate'])
_INSTALLCERTIFICATEREQUEST.fields_by_name['load_certificate'].containing_oneof = _INSTALLCERTIFICATEREQUEST.oneofs_by_name['install_request']
_INSTALLCERTIFICATERESPONSE.fields_by_name['generated_csr'].message_type = _GENERATECSRRESPONSE
_INSTALLCERTIFICATERESPONSE.fields_by_name['load_certificate'].message_type = _LOADCERTIFICATERESPONSE
_INSTALLCERTIFICATERESPONSE.oneofs_by_name['install_response'].fields.append(
  _INSTALLCERTIFICATERESPONSE.fields_by_name['generated_csr'])
_INSTALLCERTIFICATERESPONSE.fields_by_name['generated_csr'].containing_oneof = _INSTALLCERTIFICATERESPONSE.oneofs_by_name['install_response']
_INSTALLCERTIFICATERESPONSE.oneofs_by_name['install_response'].fields.append(
  _INSTALLCERTIFICATERESPONSE.fields_by_name['load_certificate'])
_INSTALLCERTIFICATERESPONSE.fields_by_name['load_certificate'].containing_oneof = _INSTALLCERTIFICATERESPONSE.oneofs_by_name['install_response']
_GENERATECSRREQUEST.fields_by_name['csr_params'].message_type = _CSRPARAMS
_CSRPARAMS.fields_by_name['type'].enum_type = _CERTIFICATETYPE
_CSRPARAMS.fields_by_name['key_type'].enum_type = _KEYTYPE
_GENERATECSRRESPONSE.fields_by_name['csr'].message_type = _CSR
_LOADCERTIFICATEREQUEST.fields_by_name['certificate'].message_type = _CERTIFICATE
_LOADCERTIFICATEREQUEST.fields_by_name['key_pair'].message_type = _KEYPAIR
_LOADCERTIFICATEREQUEST.fields_by_name['ca_certificates'].message_type = _CERTIFICATE
_GETCERTIFICATESRESPONSE.fields_by_name['certificate_info'].message_type = _CERTIFICATEINFO
_CERTIFICATEINFO.fields_by_name['certificate'].message_type = _CERTIFICATE
_CERTIFICATEINFO.fields_by_name['endpoints'].message_type = _ENDPOINT
_REVOKECERTIFICATESRESPONSE.fields_by_name['certificate_revocation_error'].message_type = _CERTIFICATEREVOCATIONERROR
_CANGENERATECSRREQUEST.fields_by_name['key_type'].enum_type = _KEYTYPE
_CANGENERATECSRREQUEST.fields_by_name['certificate_type'].enum_type = _CERTIFICATETYPE
_CERTIFICATE.fields_by_name['type'].enum_type = _CERTIFICATETYPE
_CSR.fields_by_name['type'].enum_type = _CERTIFICATETYPE
_ENDPOINT.fields_by_name['type'].enum_type = _ENDPOINT_TYPE
_ENDPOINT_TYPE.containing_type = _ENDPOINT
DESCRIPTOR.message_types_by_name['RotateCertificateRequest'] = _ROTATECERTIFICATEREQUEST
DESCRIPTOR.message_types_by_name['RotateCertificateResponse'] = _ROTATECERTIFICATERESPONSE
DESCRIPTOR.message_types_by_name['InstallCertificateRequest'] = _INSTALLCERTIFICATEREQUEST
DESCRIPTOR.message_types_by_name['InstallCertificateResponse'] = _INSTALLCERTIFICATERESPONSE
DESCRIPTOR.message_types_by_name['GenerateCSRRequest'] = _GENERATECSRREQUEST
DESCRIPTOR.message_types_by_name['CSRParams'] = _CSRPARAMS
DESCRIPTOR.message_types_by_name['GenerateCSRResponse'] = _GENERATECSRRESPONSE
DESCRIPTOR.message_types_by_name['LoadCertificateRequest'] = _LOADCERTIFICATEREQUEST
DESCRIPTOR.message_types_by_name['LoadCertificateResponse'] = _LOADCERTIFICATERESPONSE
DESCRIPTOR.message_types_by_name['FinalizeRequest'] = _FINALIZEREQUEST
DESCRIPTOR.message_types_by_name['GetCertificatesRequest'] = _GETCERTIFICATESREQUEST
DESCRIPTOR.message_types_by_name['GetCertificatesResponse'] = _GETCERTIFICATESRESPONSE
DESCRIPTOR.message_types_by_name['CertificateInfo'] = _CERTIFICATEINFO
DESCRIPTOR.message_types_by_name['RevokeCertificatesRequest'] = _REVOKECERTIFICATESREQUEST
DESCRIPTOR.message_types_by_name['RevokeCertificatesResponse'] = _REVOKECERTIFICATESRESPONSE
DESCRIPTOR.message_types_by_name['CertificateRevocationError'] = _CERTIFICATEREVOCATIONERROR
DESCRIPTOR.message_types_by_name['CanGenerateCSRRequest'] = _CANGENERATECSRREQUEST
DESCRIPTOR.message_types_by_name['CanGenerateCSRResponse'] = _CANGENERATECSRRESPONSE
DESCRIPTOR.message_types_by_name['Certificate'] = _CERTIFICATE
DESCRIPTOR.message_types_by_name['CSR'] = _CSR
DESCRIPTOR.message_types_by_name['KeyPair'] = _KEYPAIR
DESCRIPTOR.message_types_by_name['Endpoint'] = _ENDPOINT
DESCRIPTOR.enum_types_by_name['CertificateType'] = _CERTIFICATETYPE
DESCRIPTOR.enum_types_by_name['KeyType'] = _KEYTYPE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

RotateCertificateRequest = _reflection.GeneratedProtocolMessageType('RotateCertificateRequest', (_message.Message,), dict(
  DESCRIPTOR = _ROTATECERTIFICATEREQUEST,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:gnoi.certificate.RotateCertificateRequest)
  ))
_sym_db.RegisterMessage(RotateCertificateRequest)

RotateCertificateResponse = _reflection.GeneratedProtocolMessageType('RotateCertificateResponse', (_message.Message,), dict(
  DESCRIPTOR = _ROTATECERTIFICATERESPONSE,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:gnoi.certificate.RotateCertificateResponse)
  ))
_sym_db.RegisterMessage(RotateCertificateResponse)

InstallCertificateRequest = _reflection.GeneratedProtocolMessageType('InstallCertificateRequest', (_message.Message,), dict(
  DESCRIPTOR = _INSTALLCERTIFICATEREQUEST,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:gnoi.certificate.InstallCertificateRequest)
  ))
_sym_db.RegisterMessage(InstallCertificateRequest)

InstallCertificateResponse = _reflection.GeneratedProtocolMessageType('InstallCertificateResponse', (_message.Message,), dict(
  DESCRIPTOR = _INSTALLCERTIFICATERESPONSE,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:gnoi.certificate.InstallCertificateResponse)
  ))
_sym_db.RegisterMessage(InstallCertificateResponse)

GenerateCSRRequest = _reflection.GeneratedProtocolMessageType('GenerateCSRRequest', (_message.Message,), dict(
  DESCRIPTOR = _GENERATECSRREQUEST,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:gnoi.certificate.GenerateCSRRequest)
  ))
_sym_db.RegisterMessage(GenerateCSRRequest)

CSRParams = _reflection.GeneratedProtocolMessageType('CSRParams', (_message.Message,), dict(
  DESCRIPTOR = _CSRPARAMS,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:gnoi.certificate.CSRParams)
  ))
_sym_db.RegisterMessage(CSRParams)

GenerateCSRResponse = _reflection.GeneratedProtocolMessageType('GenerateCSRResponse', (_message.Message,), dict(
  DESCRIPTOR = _GENERATECSRRESPONSE,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:gnoi.certificate.GenerateCSRResponse)
  ))
_sym_db.RegisterMessage(GenerateCSRResponse)

LoadCertificateRequest = _reflection.GeneratedProtocolMessageType('LoadCertificateRequest', (_message.Message,), dict(
  DESCRIPTOR = _LOADCERTIFICATEREQUEST,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:gnoi.certificate.LoadCertificateRequest)
  ))
_sym_db.RegisterMessage(LoadCertificateRequest)

LoadCertificateResponse = _reflection.GeneratedProtocolMessageType('LoadCertificateResponse', (_message.Message,), dict(
  DESCRIPTOR = _LOADCERTIFICATERESPONSE,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:gnoi.certificate.LoadCertificateResponse)
  ))
_sym_db.RegisterMessage(LoadCertificateResponse)

FinalizeRequest = _reflection.GeneratedProtocolMessageType('FinalizeRequest', (_message.Message,), dict(
  DESCRIPTOR = _FINALIZEREQUEST,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:gnoi.certificate.FinalizeRequest)
  ))
_sym_db.RegisterMessage(FinalizeRequest)

GetCertificatesRequest = _reflection.GeneratedProtocolMessageType('GetCertificatesRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETCERTIFICATESREQUEST,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:gnoi.certificate.GetCertificatesRequest)
  ))
_sym_db.RegisterMessage(GetCertificatesRequest)

GetCertificatesResponse = _reflection.GeneratedProtocolMessageType('GetCertificatesResponse', (_message.Message,), dict(
  DESCRIPTOR = _GETCERTIFICATESRESPONSE,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:gnoi.certificate.GetCertificatesResponse)
  ))
_sym_db.RegisterMessage(GetCertificatesResponse)

CertificateInfo = _reflection.GeneratedProtocolMessageType('CertificateInfo', (_message.Message,), dict(
  DESCRIPTOR = _CERTIFICATEINFO,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:gnoi.certificate.CertificateInfo)
  ))
_sym_db.RegisterMessage(CertificateInfo)

RevokeCertificatesRequest = _reflection.GeneratedProtocolMessageType('RevokeCertificatesRequest', (_message.Message,), dict(
  DESCRIPTOR = _REVOKECERTIFICATESREQUEST,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:gnoi.certificate.RevokeCertificatesRequest)
  ))
_sym_db.RegisterMessage(RevokeCertificatesRequest)

RevokeCertificatesResponse = _reflection.GeneratedProtocolMessageType('RevokeCertificatesResponse', (_message.Message,), dict(
  DESCRIPTOR = _REVOKECERTIFICATESRESPONSE,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:gnoi.certificate.RevokeCertificatesResponse)
  ))
_sym_db.RegisterMessage(RevokeCertificatesResponse)

CertificateRevocationError = _reflection.GeneratedProtocolMessageType('CertificateRevocationError', (_message.Message,), dict(
  DESCRIPTOR = _CERTIFICATEREVOCATIONERROR,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:gnoi.certificate.CertificateRevocationError)
  ))
_sym_db.RegisterMessage(CertificateRevocationError)

CanGenerateCSRRequest = _reflection.GeneratedProtocolMessageType('CanGenerateCSRRequest', (_message.Message,), dict(
  DESCRIPTOR = _CANGENERATECSRREQUEST,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:gnoi.certificate.CanGenerateCSRRequest)
  ))
_sym_db.RegisterMessage(CanGenerateCSRRequest)

CanGenerateCSRResponse = _reflection.GeneratedProtocolMessageType('CanGenerateCSRResponse', (_message.Message,), dict(
  DESCRIPTOR = _CANGENERATECSRRESPONSE,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:gnoi.certificate.CanGenerateCSRResponse)
  ))
_sym_db.RegisterMessage(CanGenerateCSRResponse)

Certificate = _reflection.GeneratedProtocolMessageType('Certificate', (_message.Message,), dict(
  DESCRIPTOR = _CERTIFICATE,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:gnoi.certificate.Certificate)
  ))
_sym_db.RegisterMessage(Certificate)

CSR = _reflection.GeneratedProtocolMessageType('CSR', (_message.Message,), dict(
  DESCRIPTOR = _CSR,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:gnoi.certificate.CSR)
  ))
_sym_db.RegisterMessage(CSR)

KeyPair = _reflection.GeneratedProtocolMessageType('KeyPair', (_message.Message,), dict(
  DESCRIPTOR = _KEYPAIR,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:gnoi.certificate.KeyPair)
  ))
_sym_db.RegisterMessage(KeyPair)

Endpoint = _reflection.GeneratedProtocolMessageType('Endpoint', (_message.Message,), dict(
  DESCRIPTOR = _ENDPOINT,
  __module__ = 'cert_pb2'
  # @@protoc_insertion_point(class_scope:gnoi.certificate.Endpoint)
  ))
_sym_db.RegisterMessage(Endpoint)



_CERTIFICATEMANAGEMENT = _descriptor.ServiceDescriptor(
  name='CertificateManagement',
  full_name='gnoi.certificate.CertificateManagement',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=2711,
  serialized_end=3261,
  methods=[
  _descriptor.MethodDescriptor(
    name='Rotate',
    full_name='gnoi.certificate.CertificateManagement.Rotate',
    index=0,
    containing_service=None,
    input_type=_ROTATECERTIFICATEREQUEST,
    output_type=_ROTATECERTIFICATERESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='Install',
    full_name='gnoi.certificate.CertificateManagement.Install',
    index=1,
    containing_service=None,
    input_type=_INSTALLCERTIFICATEREQUEST,
    output_type=_INSTALLCERTIFICATERESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='GetCertificates',
    full_name='gnoi.certificate.CertificateManagement.GetCertificates',
    index=2,
    containing_service=None,
    input_type=_GETCERTIFICATESREQUEST,
    output_type=_GETCERTIFICATESRESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='RevokeCertificates',
    full_name='gnoi.certificate.CertificateManagement.RevokeCertificates',
    index=3,
    containing_service=None,
    input_type=_REVOKECERTIFICATESREQUEST,
    output_type=_REVOKECERTIFICATESRESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='CanGenerateCSR',
    full_name='gnoi.certificate.CertificateManagement.CanGenerateCSR',
    index=4,
    containing_service=None,
    input_type=_CANGENERATECSRREQUEST,
    output_type=_CANGENERATECSRRESPONSE,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_CERTIFICATEMANAGEMENT)

DESCRIPTOR.services_by_name['CertificateManagement'] = _CERTIFICATEMANAGEMENT

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class CertificateManagementStub(object):
    """option (types.gnoi_version) = "0.1.0";

    The Certificate Management Service exported by targets.
    The service primarily exports two main RPCs, Install & Rotate which are used
    for installation of a new certificate, and rotation of an existing
    certificate on a target, along with a few management related RPCs.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Rotate = channel.stream_stream(
          '/gnoi.certificate.CertificateManagement/Rotate',
          request_serializer=RotateCertificateRequest.SerializeToString,
          response_deserializer=RotateCertificateResponse.FromString,
          )
      self.Install = channel.stream_stream(
          '/gnoi.certificate.CertificateManagement/Install',
          request_serializer=InstallCertificateRequest.SerializeToString,
          response_deserializer=InstallCertificateResponse.FromString,
          )
      self.GetCertificates = channel.unary_unary(
          '/gnoi.certificate.CertificateManagement/GetCertificates',
          request_serializer=GetCertificatesRequest.SerializeToString,
          response_deserializer=GetCertificatesResponse.FromString,
          )
      self.RevokeCertificates = channel.unary_unary(
          '/gnoi.certificate.CertificateManagement/RevokeCertificates',
          request_serializer=RevokeCertificatesRequest.SerializeToString,
          response_deserializer=RevokeCertificatesResponse.FromString,
          )
      self.CanGenerateCSR = channel.unary_unary(
          '/gnoi.certificate.CertificateManagement/CanGenerateCSR',
          request_serializer=CanGenerateCSRRequest.SerializeToString,
          response_deserializer=CanGenerateCSRResponse.FromString,
          )


  class CertificateManagementServicer(object):
    """option (types.gnoi_version) = "0.1.0";

    The Certificate Management Service exported by targets.
    The service primarily exports two main RPCs, Install & Rotate which are used
    for installation of a new certificate, and rotation of an existing
    certificate on a target, along with a few management related RPCs.
    """

    def Rotate(self, request_iterator, context):
      """Rotate will replace an existing Certificate on the target by creating a
      new CSR request and placing the new Certificate based on the CSR on the
      target. If the stream is broken or any steps in the process fail the
      target must rollback to the original Certificate.

      The following describes the sequence of messages that must be exchanged
      in the Rotate() RPC.

      Sequence of expected messages:
      Case 1: When Target generates the CSR.

      Step 1: Start the stream
      Client <---- Rotate() RPC stream begin ------> Target

      Step 2: CSR
      Client -----> GenerateCSRRequest----> Target
      Client <----- GenerateCSRResponse <--- Target

      Step 3: Certificate Signing
      Client gets the certificate signed by the CA.

      Step 4: Send Certificate to Target.
      Client --> LoadCertificateRequest ----> Target
      Client <-- LoadCertificateResponse <--- Target

      Step 5: Test/Validation by the client.
      This step should be to create a new connection to the target using
      The new certificate and validate that the certificate works.
      Once verfied, the client will then proceed to finalize the rotation.
      If the new connection cannot be completed the client will cancel the
      RPC thereby forcing the target to rollback the certificate.

      Step 6: Final commit.
      Client ---> FinalizeRequest ----> Target


      Case 2: When Client generates the CSR.
      Step 1: Start the stream
      Client <---- Rotate() RPC stream begin ----> Target

      Step 2: CSR
      Client generates its own certificate.

      Step 3: Certificate Signing
      Client gets the certificate signed by the CA.

      Step 4: Send Certificate to Target.
      Client ---> LoadCertificateRequest ----> Target
      Client <--- LoadCertificateResponse <--- Target

      Step 5: Test/Validation by the client.

      Step 6: Final commit.
      Client ---> FinalizeRequest ----> Target
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Install(self, request_iterator, context):
      """Install will put a new Certificate on the target by creating a new CSR
      request and placing the new Certificate based on the CSR on the target.The
      new Certificate will be associated with a new Certificate Id on the target.
      If the target has a pre existing Certificate with the given Certificate Id,
      the operation should fail.
      If the stream is broken or any steps in the process fail the target must
      revert any changes in state.

      The following describes the sequence of messages that must be exchanged
      in the Install() RPC.

      Sequence of expected messages:
      Case 1: When Target generates the CSR-------------------------:

      Step 1: Start the stream
      Client <---- Install() RPC stream begin ------> Target

      Step 2: CSR
      Client -----> GenerateCSRRequest() ----> Target
      Client <---- GenerateCSRResponse() <---- Target

      Step 3: Certificate Signing
      Client gets the certificate signed by the CA.

      Step 4: Send Certificate to Target.
      Client -> LoadCertificateRequest() ----> Target
      Client <- LoadCertificateResponse() <--- Target

      Case 2: When Client generates the CSR-------------------------:
      Step 1: Start the stream
      Client <---- Install() RPC stream begin ------> Target

      Step 2: CSR
      Client generates its own certificate.

      Step 3: Certificate Signing
      Client gets the certificate signed by the CA.

      Step 4: Send Certificate to Target.
      Client -> LoadCertificateRequest() ----> Target
      Client <- LoadCertificateResponse() <--- Target

      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetCertificates(self, request, context):
      """An RPC to get the certificates on the target.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def RevokeCertificates(self, request, context):
      """An RPC to revoke specific certificates.
      If a certificate is not present on the target, the request should silently
      succeed. Revoking a certificate should render the existing certificate
      unusable by any endpoints.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def CanGenerateCSR(self, request, context):
      """An RPC to ask a target if it can generate a Certificate.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_CertificateManagementServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Rotate': grpc.stream_stream_rpc_method_handler(
            servicer.Rotate,
            request_deserializer=RotateCertificateRequest.FromString,
            response_serializer=RotateCertificateResponse.SerializeToString,
        ),
        'Install': grpc.stream_stream_rpc_method_handler(
            servicer.Install,
            request_deserializer=InstallCertificateRequest.FromString,
            response_serializer=InstallCertificateResponse.SerializeToString,
        ),
        'GetCertificates': grpc.unary_unary_rpc_method_handler(
            servicer.GetCertificates,
            request_deserializer=GetCertificatesRequest.FromString,
            response_serializer=GetCertificatesResponse.SerializeToString,
        ),
        'RevokeCertificates': grpc.unary_unary_rpc_method_handler(
            servicer.RevokeCertificates,
            request_deserializer=RevokeCertificatesRequest.FromString,
            response_serializer=RevokeCertificatesResponse.SerializeToString,
        ),
        'CanGenerateCSR': grpc.unary_unary_rpc_method_handler(
            servicer.CanGenerateCSR,
            request_deserializer=CanGenerateCSRRequest.FromString,
            response_serializer=CanGenerateCSRResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'gnoi.certificate.CertificateManagement', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaCertificateManagementServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """option (types.gnoi_version) = "0.1.0";

    The Certificate Management Service exported by targets.
    The service primarily exports two main RPCs, Install & Rotate which are used
    for installation of a new certificate, and rotation of an existing
    certificate on a target, along with a few management related RPCs.
    """
    def Rotate(self, request_iterator, context):
      """Rotate will replace an existing Certificate on the target by creating a
      new CSR request and placing the new Certificate based on the CSR on the
      target. If the stream is broken or any steps in the process fail the
      target must rollback to the original Certificate.

      The following describes the sequence of messages that must be exchanged
      in the Rotate() RPC.

      Sequence of expected messages:
      Case 1: When Target generates the CSR.

      Step 1: Start the stream
      Client <---- Rotate() RPC stream begin ------> Target

      Step 2: CSR
      Client -----> GenerateCSRRequest----> Target
      Client <----- GenerateCSRResponse <--- Target

      Step 3: Certificate Signing
      Client gets the certificate signed by the CA.

      Step 4: Send Certificate to Target.
      Client --> LoadCertificateRequest ----> Target
      Client <-- LoadCertificateResponse <--- Target

      Step 5: Test/Validation by the client.
      This step should be to create a new connection to the target using
      The new certificate and validate that the certificate works.
      Once verfied, the client will then proceed to finalize the rotation.
      If the new connection cannot be completed the client will cancel the
      RPC thereby forcing the target to rollback the certificate.

      Step 6: Final commit.
      Client ---> FinalizeRequest ----> Target


      Case 2: When Client generates the CSR.
      Step 1: Start the stream
      Client <---- Rotate() RPC stream begin ----> Target

      Step 2: CSR
      Client generates its own certificate.

      Step 3: Certificate Signing
      Client gets the certificate signed by the CA.

      Step 4: Send Certificate to Target.
      Client ---> LoadCertificateRequest ----> Target
      Client <--- LoadCertificateResponse <--- Target

      Step 5: Test/Validation by the client.

      Step 6: Final commit.
      Client ---> FinalizeRequest ----> Target
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Install(self, request_iterator, context):
      """Install will put a new Certificate on the target by creating a new CSR
      request and placing the new Certificate based on the CSR on the target.The
      new Certificate will be associated with a new Certificate Id on the target.
      If the target has a pre existing Certificate with the given Certificate Id,
      the operation should fail.
      If the stream is broken or any steps in the process fail the target must
      revert any changes in state.

      The following describes the sequence of messages that must be exchanged
      in the Install() RPC.

      Sequence of expected messages:
      Case 1: When Target generates the CSR-------------------------:

      Step 1: Start the stream
      Client <---- Install() RPC stream begin ------> Target

      Step 2: CSR
      Client -----> GenerateCSRRequest() ----> Target
      Client <---- GenerateCSRResponse() <---- Target

      Step 3: Certificate Signing
      Client gets the certificate signed by the CA.

      Step 4: Send Certificate to Target.
      Client -> LoadCertificateRequest() ----> Target
      Client <- LoadCertificateResponse() <--- Target

      Case 2: When Client generates the CSR-------------------------:
      Step 1: Start the stream
      Client <---- Install() RPC stream begin ------> Target

      Step 2: CSR
      Client generates its own certificate.

      Step 3: Certificate Signing
      Client gets the certificate signed by the CA.

      Step 4: Send Certificate to Target.
      Client -> LoadCertificateRequest() ----> Target
      Client <- LoadCertificateResponse() <--- Target

      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetCertificates(self, request, context):
      """An RPC to get the certificates on the target.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def RevokeCertificates(self, request, context):
      """An RPC to revoke specific certificates.
      If a certificate is not present on the target, the request should silently
      succeed. Revoking a certificate should render the existing certificate
      unusable by any endpoints.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def CanGenerateCSR(self, request, context):
      """An RPC to ask a target if it can generate a Certificate.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaCertificateManagementStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """option (types.gnoi_version) = "0.1.0";

    The Certificate Management Service exported by targets.
    The service primarily exports two main RPCs, Install & Rotate which are used
    for installation of a new certificate, and rotation of an existing
    certificate on a target, along with a few management related RPCs.
    """
    def Rotate(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      """Rotate will replace an existing Certificate on the target by creating a
      new CSR request and placing the new Certificate based on the CSR on the
      target. If the stream is broken or any steps in the process fail the
      target must rollback to the original Certificate.

      The following describes the sequence of messages that must be exchanged
      in the Rotate() RPC.

      Sequence of expected messages:
      Case 1: When Target generates the CSR.

      Step 1: Start the stream
      Client <---- Rotate() RPC stream begin ------> Target

      Step 2: CSR
      Client -----> GenerateCSRRequest----> Target
      Client <----- GenerateCSRResponse <--- Target

      Step 3: Certificate Signing
      Client gets the certificate signed by the CA.

      Step 4: Send Certificate to Target.
      Client --> LoadCertificateRequest ----> Target
      Client <-- LoadCertificateResponse <--- Target

      Step 5: Test/Validation by the client.
      This step should be to create a new connection to the target using
      The new certificate and validate that the certificate works.
      Once verfied, the client will then proceed to finalize the rotation.
      If the new connection cannot be completed the client will cancel the
      RPC thereby forcing the target to rollback the certificate.

      Step 6: Final commit.
      Client ---> FinalizeRequest ----> Target


      Case 2: When Client generates the CSR.
      Step 1: Start the stream
      Client <---- Rotate() RPC stream begin ----> Target

      Step 2: CSR
      Client generates its own certificate.

      Step 3: Certificate Signing
      Client gets the certificate signed by the CA.

      Step 4: Send Certificate to Target.
      Client ---> LoadCertificateRequest ----> Target
      Client <--- LoadCertificateResponse <--- Target

      Step 5: Test/Validation by the client.

      Step 6: Final commit.
      Client ---> FinalizeRequest ----> Target
      """
      raise NotImplementedError()
    def Install(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      """Install will put a new Certificate on the target by creating a new CSR
      request and placing the new Certificate based on the CSR on the target.The
      new Certificate will be associated with a new Certificate Id on the target.
      If the target has a pre existing Certificate with the given Certificate Id,
      the operation should fail.
      If the stream is broken or any steps in the process fail the target must
      revert any changes in state.

      The following describes the sequence of messages that must be exchanged
      in the Install() RPC.

      Sequence of expected messages:
      Case 1: When Target generates the CSR-------------------------:

      Step 1: Start the stream
      Client <---- Install() RPC stream begin ------> Target

      Step 2: CSR
      Client -----> GenerateCSRRequest() ----> Target
      Client <---- GenerateCSRResponse() <---- Target

      Step 3: Certificate Signing
      Client gets the certificate signed by the CA.

      Step 4: Send Certificate to Target.
      Client -> LoadCertificateRequest() ----> Target
      Client <- LoadCertificateResponse() <--- Target

      Case 2: When Client generates the CSR-------------------------:
      Step 1: Start the stream
      Client <---- Install() RPC stream begin ------> Target

      Step 2: CSR
      Client generates its own certificate.

      Step 3: Certificate Signing
      Client gets the certificate signed by the CA.

      Step 4: Send Certificate to Target.
      Client -> LoadCertificateRequest() ----> Target
      Client <- LoadCertificateResponse() <--- Target

      """
      raise NotImplementedError()
    def GetCertificates(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """An RPC to get the certificates on the target.
      """
      raise NotImplementedError()
    GetCertificates.future = None
    def RevokeCertificates(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """An RPC to revoke specific certificates.
      If a certificate is not present on the target, the request should silently
      succeed. Revoking a certificate should render the existing certificate
      unusable by any endpoints.
      """
      raise NotImplementedError()
    RevokeCertificates.future = None
    def CanGenerateCSR(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """An RPC to ask a target if it can generate a Certificate.
      """
      raise NotImplementedError()
    CanGenerateCSR.future = None


  def beta_create_CertificateManagement_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('gnoi.certificate.CertificateManagement', 'CanGenerateCSR'): CanGenerateCSRRequest.FromString,
      ('gnoi.certificate.CertificateManagement', 'GetCertificates'): GetCertificatesRequest.FromString,
      ('gnoi.certificate.CertificateManagement', 'Install'): InstallCertificateRequest.FromString,
      ('gnoi.certificate.CertificateManagement', 'RevokeCertificates'): RevokeCertificatesRequest.FromString,
      ('gnoi.certificate.CertificateManagement', 'Rotate'): RotateCertificateRequest.FromString,
    }
    response_serializers = {
      ('gnoi.certificate.CertificateManagement', 'CanGenerateCSR'): CanGenerateCSRResponse.SerializeToString,
      ('gnoi.certificate.CertificateManagement', 'GetCertificates'): GetCertificatesResponse.SerializeToString,
      ('gnoi.certificate.CertificateManagement', 'Install'): InstallCertificateResponse.SerializeToString,
      ('gnoi.certificate.CertificateManagement', 'RevokeCertificates'): RevokeCertificatesResponse.SerializeToString,
      ('gnoi.certificate.CertificateManagement', 'Rotate'): RotateCertificateResponse.SerializeToString,
    }
    method_implementations = {
      ('gnoi.certificate.CertificateManagement', 'CanGenerateCSR'): face_utilities.unary_unary_inline(servicer.CanGenerateCSR),
      ('gnoi.certificate.CertificateManagement', 'GetCertificates'): face_utilities.unary_unary_inline(servicer.GetCertificates),
      ('gnoi.certificate.CertificateManagement', 'Install'): face_utilities.stream_stream_inline(servicer.Install),
      ('gnoi.certificate.CertificateManagement', 'RevokeCertificates'): face_utilities.unary_unary_inline(servicer.RevokeCertificates),
      ('gnoi.certificate.CertificateManagement', 'Rotate'): face_utilities.stream_stream_inline(servicer.Rotate),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_CertificateManagement_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('gnoi.certificate.CertificateManagement', 'CanGenerateCSR'): CanGenerateCSRRequest.SerializeToString,
      ('gnoi.certificate.CertificateManagement', 'GetCertificates'): GetCertificatesRequest.SerializeToString,
      ('gnoi.certificate.CertificateManagement', 'Install'): InstallCertificateRequest.SerializeToString,
      ('gnoi.certificate.CertificateManagement', 'RevokeCertificates'): RevokeCertificatesRequest.SerializeToString,
      ('gnoi.certificate.CertificateManagement', 'Rotate'): RotateCertificateRequest.SerializeToString,
    }
    response_deserializers = {
      ('gnoi.certificate.CertificateManagement', 'CanGenerateCSR'): CanGenerateCSRResponse.FromString,
      ('gnoi.certificate.CertificateManagement', 'GetCertificates'): GetCertificatesResponse.FromString,
      ('gnoi.certificate.CertificateManagement', 'Install'): InstallCertificateResponse.FromString,
      ('gnoi.certificate.CertificateManagement', 'RevokeCertificates'): RevokeCertificatesResponse.FromString,
      ('gnoi.certificate.CertificateManagement', 'Rotate'): RotateCertificateResponse.FromString,
    }
    cardinalities = {
      'CanGenerateCSR': cardinality.Cardinality.UNARY_UNARY,
      'GetCertificates': cardinality.Cardinality.UNARY_UNARY,
      'Install': cardinality.Cardinality.STREAM_STREAM,
      'RevokeCertificates': cardinality.Cardinality.UNARY_UNARY,
      'Rotate': cardinality.Cardinality.STREAM_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'gnoi.certificate.CertificateManagement', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
